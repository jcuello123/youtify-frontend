{"version":3,"sources":["buttonshandler.js","accesstoken.js","components/Buttons.js","theme.js","components/Snackbars.js","App.js","serviceWorker.js","index.js"],"names":["displayed_playlist","accessToken","queryString","parse","window","location","search","access_token","Buttons","props","displaySongs","playlist","addToPlaylist","setOpenSuccess","setOpenError","Fragment","Button","style","background","color","margin","variant","onClick","name","theme","createMuiTheme","palette","primary","main","overrides","MuiOutlinedInput","root","position","borderColor","borderWidth","MuiFormLabel","Snackbars","open_success","open_error","handleClose","Snackbar","open","autoHideDuration","onClose","severity","track_uris","a","youtube_playlist_link","document","getElementById","value","displayed_class_name","replaceAll","replace","querySelector","innerHTML","class_name","songs","getTrackUris","songs_and_track_uris","setTimeout","forEach","song_and_track_uri","song","div","createElement","p","div_class","song_name","classList","addEventListener","removeSong","textContent","artist","appendChild","axios","post","res","youtube_playlist","data","Object","entries","get","headers","Accept","Authorization","items","tracks","length","track_uri","uri","push","index","indexOf","splice","remove","id","uris","App","useEffect","then","setPlaylists","useState","playlists","className","map","i","key","images","width","borderRadius","src","url","ThemeProvider","TextField","InputProps","label","event","reason","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2b468fb.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { accessToken } from \"./accesstoken\";\r\n\r\nlet track_uris = [];\r\nlet displayed_playlist;\r\n\r\nexport async function displaySongs(playlist) {\r\n  const youtube_playlist_link = document.getElementById(playlist.name).value;\r\n\r\n  if (displayed_playlist && displayed_playlist.name !== playlist.name) {\r\n    let displayed_class_name = displayed_playlist.name\r\n      .replaceAll(\" \", \"_\")\r\n      .replace(/[^\\w\\s]/gi, \"\");\r\n    track_uris = [];\r\n    document.querySelector(`.${displayed_class_name}`).innerHTML = \"\";\r\n    document.getElementById(displayed_class_name).value = \"\";\r\n  }\r\n\r\n  displayed_playlist = playlist;\r\n\r\n  if (!youtube_playlist_link) {\r\n    return;\r\n  }\r\n\r\n  //remove displayed songs if any\r\n  let class_name = playlist.name.replaceAll(\" \", \"_\").replace(/[^\\w\\s]/gi, \"\");\r\n  let songs = document.querySelector(`.${class_name}`);\r\n  songs.innerHTML = \"\";\r\n\r\n  let { songs_and_track_uris } = await getTrackUris(playlist);\r\n\r\n  //wait for getTrackUris to respond\r\n  setTimeout(async () => {\r\n    //display all songs\r\n    songs_and_track_uris.forEach((song_and_track_uri) => {\r\n      let song = song_and_track_uri.song;\r\n      let div = document.createElement(\"div\");\r\n      let p = document.createElement(\"p\");\r\n      let div_class =\r\n        \"t\" + song[1].song_name.replaceAll(\" \", \"_\").replace(/[^\\w\\s]/gi, \"\");\r\n      div.classList = `${div_class} display_song`;\r\n      div.addEventListener(\"click\", () =>\r\n        removeSong(div_class, song_and_track_uri)\r\n      );\r\n      p.textContent = `${song[1].artist} - ${song[1].song_name}`;\r\n      div.appendChild(p);\r\n      songs.appendChild(div);\r\n    });\r\n  }, 500);\r\n}\r\n\r\nasync function getTrackUris(playlist) {\r\n  const youtube_playlist_link = document.getElementById(playlist.name).value;\r\n\r\n  let songs_and_track_uris = [];\r\n\r\n  const res = await axios.post(\"http://localhost:3001/songs\", {\r\n    youtube_playlist_link: youtube_playlist_link,\r\n  });\r\n\r\n  let youtube_playlist = res.data;\r\n\r\n  //convert object to array\r\n  youtube_playlist = Object.entries(youtube_playlist);\r\n\r\n  youtube_playlist.forEach(async (song) => {\r\n    const res = await axios.get(\r\n      `https://api.spotify.com/v1/search?q=artist%3A${song[1].artist}+track%3A${song[1].song_name}&type=track&limit=1`,\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + accessToken,\r\n        },\r\n      }\r\n    );\r\n\r\n    const items = res.data.tracks.items;\r\n\r\n    if (items.length > 0) {\r\n      let track_uri = items[0].uri;\r\n      track_uris.push(track_uri);\r\n      songs_and_track_uris.push({ song, track_uri });\r\n    }\r\n  });\r\n\r\n  return { songs_and_track_uris };\r\n}\r\n\r\nfunction removeSong(div_class, song_and_track_uri) {\r\n  let index = track_uris.indexOf(song_and_track_uri.track_uri);\r\n  track_uris.splice(index, 1);\r\n  document.querySelector(`.${div_class}`).remove();\r\n}\r\n\r\nexport async function addToPlaylist(playlist, setOpenSuccess, setOpenError) {\r\n  let class_name = playlist.name.replaceAll(\" \", \"_\").replace(/[^\\w\\s]/gi, \"\");\r\n\r\n  setOpenSuccess(false);\r\n  setOpenError(false);\r\n\r\n  if (!displayed_playlist || displayed_playlist.name !== playlist.name) {\r\n    return;\r\n  }\r\n\r\n  if (track_uris.length > 0) {\r\n    setOpenSuccess(true);\r\n  } else {\r\n    setOpenError(true);\r\n    return;\r\n  }\r\n\r\n  await axios.post(\r\n    `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,\r\n    {\r\n      uris: track_uris,\r\n    },\r\n    {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + accessToken,\r\n      },\r\n    }\r\n  );\r\n\r\n  track_uris = [];\r\n  document.querySelector(`.${class_name}`).innerHTML = \"\";\r\n  document.getElementById(class_name).value = \"\";\r\n}\r\n","import queryString from 'query-string';\r\n\r\nconst value = queryString.parse(window.location.search);\r\nexport const accessToken = value.access_token;","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport const Buttons = (props) => {\r\n  let {\r\n    displaySongs,\r\n    playlist,\r\n    addToPlaylist,\r\n    setOpenSuccess,\r\n    setOpenError,\r\n  } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        style={{ background: \"#1db954\", color: \"white\", margin: \"10px\" }}\r\n        variant=\"contained\"\r\n        onClick={() => displaySongs(playlist)}\r\n      >\r\n        Display playlist\r\n      </Button>\r\n\r\n      <Button\r\n        style={{ background: \"#1db954\", color: \"white\", margin: \"10px\" }}\r\n        variant=\"contained\"\r\n        onClick={() => addToPlaylist(playlist, setOpenSuccess, setOpenError)}\r\n      >\r\n        Add to {playlist.name}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#1db954\",\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiOutlinedInput: {\r\n      root: {\r\n        position: \"relative\",\r\n        \"& $notchedOutline\": {\r\n          borderColor: \"#1db954\",\r\n        },\r\n        \"&:hover:not($disabled):not($focused):not($error) $notchedOutline\": {\r\n          borderColor: \"#1db954\",\r\n          // Reset on touch devices, it doesn't add specificity\r\n          \"@media (hover: none)\": {\r\n            borderColor: \"#1db954\",\r\n          },\r\n        },\r\n        \"&$focused $notchedOutline\": {\r\n          borderColor: \"#1db954\",\r\n          borderWidth: 1,\r\n        },\r\n      },\r\n    },\r\n    MuiFormLabel: {\r\n      root: {\r\n        color: \"#1db954\",\r\n      },\r\n    },\r\n  },\r\n});\r\n","import { Snackbar } from \"@material-ui/core\";\r\nimport MultiAlert from \"@material-ui/lab/Alert\";\r\nimport React from \"react\";\r\n\r\nexport const Snackbars = (props) => {\r\n  let { open_success, open_error, handleClose } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <Snackbar\r\n        open={open_success}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n      >\r\n        <MultiAlert variant=\"filled\" onClose={handleClose} severity=\"success\">\r\n          Successfully added playlist!\r\n        </MultiAlert>\r\n      </Snackbar>\r\n\r\n      <Snackbar open={open_error} autoHideDuration={6000} onClose={handleClose}>\r\n        <MultiAlert variant=\"filled\" onClose={handleClose} severity=\"error\">\r\n          There was an error when trying to add the playlist. Note: make sure\r\n          you display the songs first.\r\n        </MultiAlert>\r\n      </Snackbar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { accessToken } from \"./accesstoken\";\nimport \"./App.css\";\nimport { TextField, ThemeProvider } from \"@material-ui/core\";\nimport { Buttons } from \"./components/Buttons\";\nimport { theme } from \"./theme\";\nimport { Snackbars } from \"./components/Snackbars\";\nimport { displaySongs, addToPlaylist } from \"./buttonshandler\";\n\nfunction App() {\n  useEffect(() => {\n    getPlayLists();\n  }, []);\n\n  function getPlayLists() {\n    axios\n      .get(\"https://api.spotify.com/v1/me/playlists\", {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + accessToken,\n        },\n      })\n      .then((res) => setPlaylists(res.data.items));\n  }\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    if (open_success) {\n      setOpenSuccess(false);\n    }\n    if (open_error) {\n      setOpenError(false);\n    }\n  };\n\n  const [playlists, setPlaylists] = useState([]);\n  const [open_success, setOpenSuccess] = useState(false);\n  const [open_error, setOpenError] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {playlists.map((playlist, i) => (\n        <div className=\"playlist\" key={i}>\n          <h1>Playlist: {playlist.name}</h1>\n          {playlist.images.length > 0 && (\n            <img\n              style={{ width: \"25%\", borderRadius: \"8px\" }}\n              src={playlist.images[0].url}\n            />\n          )}\n          <ThemeProvider theme={theme}>\n            <TextField\n              style={{\n                background: \"black\",\n                margin: \"10px\",\n                borderRadius: \"7px\",\n              }}\n              InputProps={{ style: { color: \"white\" } }}\n              label=\"YouTube playlist\"\n              variant=\"outlined\"\n              id={playlist.name}\n            />\n          </ThemeProvider>\n\n          <div\n            className={playlist.name\n              .replaceAll(\" \", \"_\")\n              .replace(/[^\\w\\s]/gi, \"\")}\n          ></div>\n\n          <Buttons\n            displaySongs={displaySongs}\n            playlist={playlist}\n            addToPlaylist={addToPlaylist}\n            setOpenSuccess={setOpenSuccess}\n            setOpenError={setOpenError}\n          />\n        </div>\n      ))}\n\n      <Snackbars\n        open_success={open_success}\n        open_error={open_error}\n        handleClose={handleClose}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}